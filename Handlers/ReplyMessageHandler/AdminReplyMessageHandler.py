import re
import pandas as pd

from Database.DBManager import DBManager
from vkbottle.bot import Bot, Message
from vkbottle import DocMessagesUploader

class AdminReplyMessageHandler:
    def __init__(self, bot: Bot, db: DBManager):
        self.bot = bot
        self.db = db

    async def admin_reply_command(self, message: Message):
        if message.reply_message.id:
            reply_id = message.reply_message.id

            reply_message = await self.db.get_admin_message_by_type(reply_id)

            if not reply_message or len(reply_message) < 3 or reply_message[2] is None:
                await message.answer('ü§ñ–ù–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–≤–µ—Ç–∏—Ç—å')
                return

            command = reply_message[2]
            print('–ö–æ–º–∞–Ω–¥–∞ ' + command)
            command_map = {
                '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ': self.handle_reply_send_message,
                '—Å—Ç–∞—Ä–æ—Å—Ç—ã': self.handle_group_leader,
                '–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è': self.handler_confirmed_user,
                '–≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è': self.handler_user_question,
                '—Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞': self.handler_excel,
                '–≤–æ–∑–¥—É—à–Ω–∞—è —Ç—Ä–µ–≤–æ–≥–∞': self.handler_excel
            }

            if command in command_map:
                await command_map[command](message)
            else:
                await message.answer("ü§ñ–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è.")
        else:
            await message.answer("ü§ñ–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–∞ –Ω–µ —Ç–∞–∫")

    async def handle_reply_send_message(self, message: Message):
        lines = message.text.split('\n', 1)

        if not message.text.strip():
            await message.answer("ü§ñ–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
            return
        elif len(lines) == 1 and not message.attachments:
            await message.answer("ü§ñ–î–ª—è –æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –±–ª–æ–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–ª–æ–∂–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏–µ.")
            return

        command_line = lines[0].split()
        text = lines[1]

        command = command_line[0].lower()
        command_parameters = [int(command_parameters) for command_parameters in command_line[1:]]

        user_data = []

        '''
        attachments_list = []

        for attachment in message.attachments:
            if attachment.photo:
                owner_id = attachment.photo.owner_id
                media_id = attachment.photo.id
                access_key = attachment.photo.access_key

                attachment_str = f"photo{owner_id}_{media_id}"
                if access_key:
                    attachment_str += f"_{access_key}"
                attachments_list.append(attachment_str)
            elif attachment.doc:
                owner_id = attachment.doc.owner_id
                media_id = attachment.doc.id
                access_key = attachment.doc.access_key

                attachment_str = f"doc{owner_id}_{media_id}"
                if access_key:
                   attachment_str += f"_{access_key}"

                attachments_list.append(attachment_str)

        attachments_str = ','.join(attachments_list)
        '''

        if '–≤—Å–µ–º' == command:
            users = await self.db.get_all_users_with_confirmed(True)
            print(users)
            for user in users:
                user_feed_id = user[0]

                message_id = await self.bot.api.messages.send(
                    peer_id=user_feed_id,
                    message='üì¢' + str(text),
                    #attachment = attachments_str,
                    random_id=0
                )

                user_data.append((user_feed_id, message_id))

        elif '–∫—É—Ä—Å' == command:
            if len(command_parameters) == 0:
                await message.answer("ü§ñ–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –∫–∞–∫–∏–º –∫—É—Ä—Å–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
                return

            users = await self.db.get_users_by_courses(command_parameters, True)
            for user in users:
                user_feed_id = user[0]
                message_id = await self.bot.api.messages.send(
                    peer_id=user_feed_id,
                    message='üì¢' + text,
                    #attachment=attachments_str,
                    random_id=0
                )
                user_data.append((user_feed_id, message_id))
        elif '–≥—Ä—É–ø–ø–∞' == command:
            if len(command_parameters) == 0:
                await message.answer("ü§ñ–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –∫–∞–∫–∏–º –≥—Ä—É–ø–ø–∞–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
                return

            group_pattern = r'\d+\.\s*(.+)'
            groups = re.findall(group_pattern, message.reply_message.text)

            users = await self.db.get_users_by_group(groups, True)
            for user in users:
                user_feed_id = user[0]
                message_id = await self.bot.api.messages.send(
                    peer_id=user_feed_id,
                    message='üì¢' + text,
                    #attachment=attachments_str,
                    random_id=0
                )
                user_data.append((user_feed_id, message_id))
        else:
            await message.answer("ü§ñ–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞")
            return

        await self.db.add_admin_user_message(message.id, "—Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞", user_data,
                                             '—Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞')
        await message.answer("ü§ñ–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

    async def handle_group_leader(self, message: Message):
        lines = message.text.split('\n', 1)

        if len(lines) == 0:
            await message.answer("ü§ñ–í—ã –Ω–µ –Ω–∞–ø–∏—Å–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ")

        command_line = lines[0].split()

        command = command_line[0]
        command_parameters = None
        if len(command_line) > 1:
            try:
                command_parameters = int(command_line[1])
            except ValueError:
                await message.answer('ü§ñ–í—ã –Ω–µ –≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–ª–∏ id')
                return
        else:
            await message.answer('ü§ñ–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ id')
            return

        if command.lower() == '—É–¥–∞–ª–∏—Ç—å':
            if len(lines) != 1:
                await message.answer("ü§ñ–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                return

            await self.db.delete_user(command_parameters)
            await message.answer('ü§ñ–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω')
            await self.bot.api.messages.send(
                peer_id=command_parameters,
                message='‚ö†–í—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º',
                random_id=0
            )
        elif command.lower() == '–∏–∑–º–µ–Ω–∏—Ç—å':
            if len(lines) != 2:
                await message.answer("ü§ñ–í—ã –Ω–µ –Ω–∞–ø–∏—Å–∞–ª–∏ –≥—Ä—É–ø–ø—É")
                return

            pattern = r'^[–∞-—è—ë]+/[–∞-—è—ë]+-\d{2}-\d{1,2}-[–∞-—è—ë]+$'
            user_group = lines[1].lower()
            print('–ì—Ä—É–ø–ø–∞ ' + user_group)
            if re.match(pattern, user_group):
                print(f'–ì—Ä—É–ø–ø–∞ –Ω–∞–ø–∏—Å–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ {user_group}, id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {command_parameters}')
                await self.db.update_user_group(command_parameters, user_group)
                await message.answer('ü§ñ–ì—Ä—É–ø–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω–∞')
            else:
                await message.answer('ü§ñ–ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –≥—Ä—É–ø–ø—ã')
                return

            await self.bot.api.messages.send(
                peer_id=command_parameters,
                message=f'‚ö†–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–∑–º–µ–Ω–∏–ª –≤–∞—à—É –≥—Ä—É–ø–ø—É –Ω–∞ {user_group}',
                random_id=0
            )
        elif command.lower() == '–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':
            await self.db.update_user_confirmed(command_parameters, True)
            await message.answer('ü§ñ–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω')
            await self.bot.api.messages.send(
                peer_id=command_parameters,
                message='‚ö†–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º',
                random_id=0
            )

    async def handler_confirmed_user(self, message: Message):
        lines = message.text.split('\n', 1)

        if len(lines) == 0:
            await message.answer("ü§ñ–í—ã –Ω–µ –Ω–∞–ø–∏—Å–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ")

        command_line = lines[0].split()

        command_parameters = None
        if len(command_line) > 1:
            try:
                command_parameters = int(command_line[1])
            except ValueError:
                await message.answer('ü§ñ–í—ã –Ω–µ –≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–ª–∏ id')
                return
        else:
            await message.answer('ü§ñ–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ id')
            return

        await self.db.update_user_confirmed(command_parameters, True)
        await message.answer('ü§ñ–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω')
        await self.bot.api.messages.send(
            peer_id=command_parameters,
            message='‚ö†–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º',
            random_id=0
        )

    async def handler_user_question(self, message: Message):

        message_history = await self.db.get_admin_user_message_by_amdin_message(message.reply_message.id)
        print(message_history)

        user_peer_id = message_history[0][1]
        reply_to_user_message = message_history[0][0]

        print("User_peer_id " + str(user_peer_id))
        print('reply_to_user_message '+ str(reply_to_user_message))

        user_message_id = await self.bot.api.messages.send(
            peer_id=user_peer_id,#—É–∑–Ω–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            message=f'‚úÖ–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n' + message.text,
            random_id=0,
            reply_to=reply_to_user_message
        )

        print('user_message_id ' + str(user_message_id))

        await self.db.add_admin_user_message(message.id,None,
                                             [(user_peer_id, user_message_id)],
                                             '–æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
        await message.answer('ü§ñ–í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω')


    async def handler_excel(self, message: Message):
        if not message.text.strip():
            await message.answer("ü§ñ–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
            return

        command = message.text.lower()

        if command != 'excel':
            await message.answer('–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞')

        message_historys = await self.db.get_admin_user_message_by_amdin_message(message.reply_message.id)

        print('message_historys '+ str(message_historys))
        data = []
        for message_history in message_historys:
            user_reply_id = message_history[0]
            user_feed_id = message_history[1]
            user_message_reply = await self.db.get_user_message_by_reply_id(user_reply_id, user_feed_id)
            if not user_message_reply:
                continue

            print('user_message_reply ' + str(user_message_reply))
            response = await self.bot.api.messages.get_by_id(message_ids=[user_message_reply[0]])
            user_group = await self.db.get_user_by_id(user_feed_id)
            data.append((user_group, response.items[0].text))

        groups = []
        comments = []

        for ((id_value, group_name, number), comment) in data:
            groups.append(group_name)  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø
            comments.append(comment)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏

        # –°–æ–∑–¥–∞–µ–º DataFrame
        df = pd.DataFrame({
            '–ì—Ä—É–ø–ø–∞': groups,
            '–û—Ç–≤–µ—Ç': comments
        })

        excel_file_path = f'{message_historys[0][2].replace(" ", "_")}_{message_historys[0][6].replace(" ", "_").replace(":", "-")}.xlsx'
        with pd.ExcelWriter(excel_file_path, engine='openpyxl') as writer:
            df.to_excel(writer, index=False, sheet_name='–õ–∏—Å—Ç1')

        # –°–æ–∑–¥–∞–µ–º uploader –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        uploader = DocMessagesUploader(self.bot.api)

        print(excel_file_path)
        doc = await uploader.upload(peer_id=message.peer_id, file_source='./' + excel_file_path)

        await message.answer(attachment=doc)

        import os
        os.remove(excel_file_path)